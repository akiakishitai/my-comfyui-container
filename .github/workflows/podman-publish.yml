name: Publish Container Image

on:
  push:
    branches:
      - develop
    # Publish semver tags as releases.
    tags:
      - 'v*.*.*'
  pull_request:
    # filter
    paths:
      - Containerfile
      - .containerignore
      - 'data/**'
      - .github/workflows/podman-publish.yml
    branches:
      - main
      - develop

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # PR先が main ブランチの場合はレジストリにプッシュしない
  build-multiarch:
    name: Build and Push multi-architecture image
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-24.04
            arch: x86_64
          - os: ubuntu-24.04-arm
            arch: aarch64
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Install the cosign tool except on PR
      # If PR to main branch, skip.
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: ${{ github.base_ref != 'main' }}
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 #v3.5.0
        with:
          cosign-release: 'v2.2.4'

      - name: Convert container envs to lowercases
        id: lower
        run: |
          echo "IMAGE_NAME=${REGISTRY}/${IMAGE_NAME,,}" >> "$GITHUB_ENV"

          owner="${{ github.repository_owner }}"
          echo "LOGIN_REGISTRY=${REGISTRY}/${owner,,}" >> "$GITHUB_OUTPUT"

      # Login to a container image registry
      # https://github.com/redhat-actions/podman-login
      - name: Log in to a ${{ env.REGISTRY }}
        uses: redhat-actions/podman-login@4934294ad0449894bcd1e9f191899d7292469603 # v1.7
        with:
          username: ${{ github.actor }}
          password: ${{ github.token }}
          registry: ${{ steps.lower.outputs.LOGIN_REGISTRY }}

      # Extract metadata (tags, labels) for Buildah
      # https://github.com/docker/metadata-action
      - name: Extract buildah metadata
        id: meta
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
        with:
          # `images` property is converted to lowercase
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}},enable=${{ !startsWith(github.ref, 'refs/tags/v0.') }}
            type=edge,branch=develop
            type=ref,event=pr
          # `tags` in `redhat-actions/buildah-build` is SSV format
          sep-tags: ' '
          labels: |
            org.opencontainers.image.title=My ComfyUI Container
            org.opencontainers.image.description=REST API server with ComfyUI backend

      # Build container image with Buildah
      # https://github.com/redhat-actions/buildah-build
      - name: Build container image
        id: build-image
        uses: redhat-actions/buildah-build@7a95fa7ee0f02d552a32753e7414641a04307056 # v2.13
        with:
          # `image` property is converted to lowercase
          # https://github.com/redhat-actions/buildah-build/blob/7a95fa7ee0f02d552a32753e7414641a04307056/src/index.ts#L48
          image: ${{ env.IMAGE_NAME }}
          # full name (include registry and image name)
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          context: .
          containerfiles: |
            ./Containerfile
          build-args: |
            TARGETARCH=${{ matrix.arch }}
          layers: true
          extra-args: |
            --cache-to=${{ env.IMAGE_NAME }}
            --cache-from=${{ env.IMAGE_NAME }}

      - name: Check image metadata
        run: |
          set -x
          buildah inspect ${{ steps.build-image.outputs.image-with-tag }} | jq ".OCIv1.architecture"
          buildah inspect ${{ steps.build-image.outputs.image-with-tag }} | jq ".Docker.architecture"

      # Push container image to registry with Podman
      # If PR to main branch, skip.
      # https://github.com/redhat-actions/push-to-registry
      - name: Push image to ${{ env.REGISTRY }} registry
        if: ${{ github.base_ref != 'main' }}
        id: push
        uses: redhat-actions/push-to-registry@5ed88d269cf581ea9ef6dd6806d01562096bee9c # v2.8
        with:
          #image: ${{ steps.build-image.outputs.image }}
          tags: ${{ steps.build-image.outputs.tags }}
          #registry: ${{ env.REGISTRY }}

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # If PR to main branch, skip.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        if: ${{ github.base_ref != 'main' }}
        env:
          # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
          TAGS: ${{ steps.push.outputs.registry-paths }}
          DIGEST: ${{ steps.push.outputs.digest }}
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: |
          echo "${TAGS}" | jq -r '.[]' | while read -r image; do
            cosign sign --yes "${image}@${DIGEST}"
          done
